{"version":3,"sources":["components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","alt","src","process","style","display","width","height","objectFit","margin","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","states","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","id","comics","items","getAllCharacters","offset","res","results","map","getCharacter","getComic","comic","title","pageCount","language","textObjects","price","prices","getComics","View","className","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/5.4757c3b2.chunk.js","sourcesContent":["const ErrorMessage = () =>{\r\n    return (\r\n        <img alt = 'Error'\r\n        src = {process.env.PUBLIC_URL + '/error.gif'}\r\n        style = {{display:'block',width:'250px', height: '250px',objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading,request,error, clearError} = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=bf7a152fb52d1be51c5f46bf7dad913d';\r\n    const _baseOffset = 210;\r\n\r\n    const _transformCharacter = (char) =>{\r\n        return {\r\n            name: char.name,\r\n            description : char.description ? \r\n                        `${char.description.slice(0, 210)}...` \r\n                        : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects.language || 'en-us',\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) =>{\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getComics = async(offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results;\r\n    }\r\n   \r\n   return {loading,error, getAllCharacters, getCharacter,clearError, getComics,getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState , useCallback } from \"react\";\r\n\r\nexport const useHttp = () =>{\r\n    const [loading , setLoading] = useState(false);\r\n    const [error,setError] = useState(null);\r\n\r\n    const request  = useCallback(async(url,\r\n            method = 'GET', \r\n            body =  null, \r\n            headers = {'Content-Type':'applicacation/json'})=>{\r\n\r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url, {method,body,headers})\r\n\r\n            if(!response.ok){\r\n                throw new Error (`Could not feath ${url} , status : ${response.states}`)\r\n            }\r\n            setLoading(false);\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        }catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    },[]);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading , request , error , clearError};\r\n}","import './singleComicPage.scss';\r\nimport { useState, useEffect } from \"react\";\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic , setComic] = useState(null);\r\n    const {loading,error, getComic, clearError} = useMarvelService();\r\n   \r\n    useEffect (()=>{\r\n        updateComic();\r\n    },[comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic)\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic= {comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic})=>{\r\n    const {title,description,pageCount,thumbnail,language,price} = comic;\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language:{language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}