{"version":3,"sources":["components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","alt","src","process","style","display","width","height","objectFit","margin","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","states","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","id","comics","items","getAllCharacters","offset","res","results","map","getCharacter","getComic","comic","title","pageCount","language","textObjects","price","prices","getComics","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","View","imgStyle","className","href","RandomChar","setChar","upDateChar","Math","floor","random","then","onCharLoaded","target","i","arguments","length","source","forEach","key","defineProperty","getOwnPropertyDescriptors","defineProperties","useEffect","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","onCharCelected","newItemLoading","setNewItemLoading","list","setList","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newList","itemRefs","useRef","elem","item","index","current","classList","remove","add","focus","focusOnItem","tabIndex","ref","el","disabled","Skeleton","CharInfo","charId","updateChar","skeleton","ErrorBoundary","state","this","setState","props","children","Component","MainPage","selectedChar","setSelectedChar","decoration"],"mappings":"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","file":"static/js/3.519963f7.chunk.js","sourcesContent":["const ErrorMessage = () =>{\r\n    return (\r\n        <img alt = 'Error'\r\n        src = {process.env.PUBLIC_URL + '/error.gif'}\r\n        style = {{display:'block',width:'250px', height: '250px',objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading,request,error, clearError} = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=bf7a152fb52d1be51c5f46bf7dad913d';\r\n    const _baseOffset = 210;\r\n\r\n    const _transformCharacter = (char) =>{\r\n        return {\r\n            name: char.name,\r\n            description : char.description ? \r\n                        `${char.description.slice(0, 210)}...` \r\n                        : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects.language || 'en-us',\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) =>{\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getComics = async(offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results;\r\n    }\r\n   \r\n   return {loading,error, getAllCharacters, getCharacter,clearError, getComics,getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState , useCallback } from \"react\";\r\n\r\nexport const useHttp = () =>{\r\n    const [loading , setLoading] = useState(false);\r\n    const [error,setError] = useState(null);\r\n\r\n    const request  = useCallback(async(url,\r\n            method = 'GET', \r\n            body =  null, \r\n            headers = {'Content-Type':'applicacation/json'})=>{\r\n\r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url, {method,body,headers})\r\n\r\n            if(!response.ok){\r\n                throw new Error (`Could not feath ${url} , status : ${response.states}`)\r\n            }\r\n            setLoading(false);\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        }catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    },[]);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading , request , error , clearError};\r\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\r\nimport Spinner from '../spinner/Spinner';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n\r\n    const {loading,error,getCharacter, clearError} = useMarvelService();\r\n\r\n    const upDateChar = ()=>{\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000 );\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n    const onCharLoaded = (char) =>{\r\n        setChar({...char});\r\n    }\r\n\r\n    useEffect(() => {\r\n        upDateChar();\r\n    },[])\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char = {char}/> : null;\r\n\r\n    return (\r\n    \r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\" onClick={()=> upDateChar()}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = (char) =>{\r\n    const {name,description,thumbnail,homepage,wiki} = char.char;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n            <div className=\"randomchar__btns\">\r\n                <a href={homepage} className=\"button button__main\">\r\n                    <div className=\"inner\">homepage</div>\r\n                </a>\r\n                <a href={wiki} className=\"button button__secondary\">\r\n                    <div className=\"inner\">Wiki</div>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState,useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charList.scss';\r\n\r\nconst CharList = ({onCharCelected}) => {\r\n    const [newItemLoading , setNewItemLoading] = useState(false);\r\n    const [list,setList] = useState([]);\r\n    const [offset,setOffset] = useState(210);\r\n    const [charEnded,setCharEnded] = useState(false);\r\n\r\n    const {loading,error,getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true)\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }  \r\n\r\n    const onCharListLoaded = (newList) => {\r\n        if(newList.length < 9){\r\n           setCharEnded(true)\r\n        }\r\n\r\n        setList(list => [...list,...newList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 9);\r\n    }\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n    \r\n    const elem =  list.map((item,index) =>{\r\n        let {name,thumbnail,id} = item;\r\n        let imgStyle = {'objectFit' : 'cover'};\r\n        if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n            imgStyle = {'objectFit' : 'unset'};\r\n        }\r\n\r\n        return (\r\n            <li className={'char__item'}\r\n                key={id}\r\n                onClick = {()=> {\r\n                    onCharCelected(id);\r\n                    focusOnItem(index);}\r\n                }\r\n                tabIndex = {0}\r\n                ref={el => itemRefs.current[index] = el}>\r\n                <img src={thumbnail} alt={item.name} style={imgStyle}/>\r\n                <div className=\"char__name\">{name}</div>\r\n             </li>\r\n        )\r\n    })\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            <ul className=\"char__grid\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {elem}\r\n            </ul>\r\n            <button className=\"button button__main button__long\"\r\n                    disabled = {newItemLoading} \r\n                    style = {{'display': charEnded ? 'none' : 'block'}}\r\n                    onClick = {() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes =  {\r\n    onCharCelected: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import './charInfo.scss';\r\nimport { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton'\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\n\r\nconst CharInfo = ({charId})=> {\r\n    const [char , setChar] = useState(null);\r\n\r\n    const {loading,error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect (()=>{\r\n        updateChar();\r\n    },[charId])\r\n\r\n    const updateChar = () => {\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        if (i > 11 ) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes =  {\r\n    crarId: PropTypes.number,\r\n}\r\n\r\nexport default CharInfo;","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar,setSelectedChar] = useState(null);\r\n\r\n    const onCharCelected = (id) =>{\r\n        setSelectedChar(id);\r\n    }\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n                \r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                        <CharList onCharCelected= {onCharCelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId ={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            \r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}